{"ast":null,"code":"var _excluded = [\"Component\", \"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"international\", \"withCountryCallingCode\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport usePhoneDigits from './usePhoneDigits.js';\nimport { metadata as metadataType } from './PropTypes.js';\nfunction PhoneInput(_ref, ref) {\n  var Component = _ref.Component,\n    country = _ref.country,\n    defaultCountry = _ref.defaultCountry,\n    _ref$useNationalForma = _ref.useNationalFormatForDefaultCountryValue,\n    useNationalFormatForDefaultCountryValue = _ref$useNationalForma === void 0 ? true : _ref$useNationalForma,\n    value = _ref.value,\n    onChange = _ref.onChange,\n    metadata = _ref.metadata,\n    international = _ref.international,\n    withCountryCallingCode = _ref.withCountryCallingCode,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n  var _usePhoneDigits = usePhoneDigits({\n      value: value,\n      onChange: onChange,\n      country: country,\n      defaultCountry: defaultCountry,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n      metadata: metadata\n    }),\n    _usePhoneDigits2 = _slicedToArray(_usePhoneDigits, 2),\n    phoneDigits = _usePhoneDigits2[0],\n    setPhoneDigits = _usePhoneDigits2[1];\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    metadata: metadata,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    country: country || defaultCountry,\n    value: phoneDigits,\n    onChange: setPhoneDigits\n  }));\n}\nPhoneInput = /*#__PURE__*/React.forwardRef(PhoneInput);\nPhoneInput.propTypes = {\n  /**\r\n   * The phone number (in E.164 format).\r\n   * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n   * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n   */\n  value: PropTypes.string,\n  /**\r\n   * A function of `value: string?`.\r\n   * Updates the `value` property (to `undefined` in case it's empty).\r\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * as a national phone number (example: `(213) 373-4253`),\r\n   * or as an international phone number without \"country calling code\"\r\n   * if `international` property is passed (example: `213 373 4253`).\r\n   * Example: \"US\".\r\n   * If no `country` is passed then `value`\r\n   * is formatted as an international phone number.\r\n   * (example: `+1 213 373 4253`)\r\n   */\n  country: PropTypes.string,\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n   * The user can still input a phone number in international format.\r\n   * Example: \"US\".\r\n   * `country` and `defaultCountry` properties are mutually exclusive.\r\n   */\n  defaultCountry: PropTypes.string,\n  /**\r\n   * If `country` property is passed along with `international={true}` property\r\n   * then the phone number will be input in \"international\" format for that `country`\r\n   * (without \"country calling code\").\r\n   * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n   * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n   * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n   * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n   * (without \"country calling code\" `+1`).\r\n   */\n  international: PropTypes.bool,\n  /**\r\n   * If `country` and `international` properties are set,\r\n   * then by default it won't include \"country calling code\" in the input field.\r\n   * To change that, pass `withCountryCallingCode` property,\r\n   * and it will include \"country calling code\" in the input field.\r\n   */\n  withCountryCallingCode: PropTypes.bool,\n  /**\r\n   * A component that renders the `<input/>` itself and also\r\n   * parses and formats its `value` as the user inputs it.\r\n   */\n  Component: PropTypes.elementType.isRequired,\n  /**\r\n   * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n   * then the `value` will be formatted as a national phone number by default.\r\n   * To format the initial `value` of `defaultCountry` as an international number instead\r\n   * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n   */\n  useNationalFormatForDefaultCountryValue: PropTypes.bool,\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   */\n  metadata: metadataType\n};\nexport default PhoneInput;","map":{"version":3,"names":["React","PropTypes","usePhoneDigits","metadata","metadataType","PhoneInput","_ref","ref","Component","country","defaultCountry","_ref$useNationalForma","useNationalFormatForDefaultCountryValue","value","onChange","international","withCountryCallingCode","rest","_objectWithoutProperties","_excluded","_usePhoneDigits","_usePhoneDigits2","_slicedToArray","phoneDigits","setPhoneDigits","createElement","_extends","forwardRef","propTypes","string","func","isRequired","bool","elementType"],"sources":["C:\\Users\\DIVYA\\Desktop\\React Apps\\MyWorkMovielist\\my-new-app\\node_modules\\react-phone-number-input\\source\\PhoneInput.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits.js'\r\n\r\nimport { metadata as metadataType } from './PropTypes.js'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue = true,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst [\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits\r\n\t] = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits} />\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n\t * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property (to `undefined` in case it's empty).\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: metadataType\r\n}\r\n\r\nexport default PhoneInput"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAOC,cAAc,MAAM,qBAAqB;AAEhD,SAASC,QAAQ,IAAIC,YAAY,QAAQ,gBAAgB;AAEzD,SAASC,UAAUA,CAAAC,IAAA,EAWhBC,GAAG,EAAE;EAAA,IAVPC,SAAS,GAAAF,IAAA,CAATE,SAAS;IACTC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IACPC,cAAc,GAAAJ,IAAA,CAAdI,cAAc;IAAAC,qBAAA,GAAAL,IAAA,CACdM,uCAAuC;IAAvCA,uCAAuC,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAC9CE,KAAK,GAAAP,IAAA,CAALO,KAAK;IACLC,QAAQ,GAAAR,IAAA,CAARQ,QAAQ;IACRX,QAAQ,GAAAG,IAAA,CAARH,QAAQ;IACRY,aAAa,GAAAT,IAAA,CAAbS,aAAa;IACbC,sBAAsB,GAAAV,IAAA,CAAtBU,sBAAsB;IACnBC,IAAI,GAAAC,wBAAA,CAAAZ,IAAA,EAAAa,SAAA;EAEP;EACA,IAAAC,eAAA,GAGIlB,cAAc,CAAC;MAClBW,KAAK,EAALA,KAAK;MACLC,QAAQ,EAARA,QAAQ;MACRL,OAAO,EAAPA,OAAO;MACPC,cAAc,EAAdA,cAAc;MACdK,aAAa,EAAbA,aAAa;MACbC,sBAAsB,EAAtBA,sBAAsB;MACtBJ,uCAAuC,EAAvCA,uCAAuC;MACvCT,QAAQ,EAARA;IACD,CAAC,CAAC;IAAAkB,gBAAA,GAAAC,cAAA,CAAAF,eAAA;IAXDG,WAAW,GAAAF,gBAAA;IACXG,cAAc,GAAAH,gBAAA;EAWf,oBACCrB,KAAA,CAAAyB,aAAA,CAACjB,SAAS,EAAAkB,QAAA,KACLT,IAAI;IACRV,GAAG,EAAEA,GAAI;IACTJ,QAAQ,EAAEA,QAAS;IACnBY,aAAa,EAAEA,aAAc;IAC7BC,sBAAsB,EAAEA,sBAAuB;IAC/CP,OAAO,EAAEA,OAAO,IAAIC,cAAe;IACnCG,KAAK,EAAEU,WAAY;IACnBT,QAAQ,EAAEU;EAAe,EAAE,CAAC;AAE/B;AAEAnB,UAAU,gBAAGL,KAAK,CAAC2B,UAAU,CAACtB,UAAU,CAAC;AAEzCA,UAAU,CAACuB,SAAS,GAAG;EACtB;AACD;AACA;AACA;AACA;EACCf,KAAK,EAAEZ,SAAS,CAAC4B,MAAM;EAEvB;AACD;AACA;AACA;EACCf,QAAQ,EAAEb,SAAS,CAAC6B,IAAI,CAACC,UAAU;EAEnC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCtB,OAAO,EAAER,SAAS,CAAC4B,MAAM;EAEzB;AACD;AACA;AACA;AACA;AACA;AACA;EACCnB,cAAc,EAAET,SAAS,CAAC4B,MAAM;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCd,aAAa,EAAEd,SAAS,CAAC+B,IAAI;EAE7B;AACD;AACA;AACA;AACA;AACA;EACChB,sBAAsB,EAAEf,SAAS,CAAC+B,IAAI;EAEtC;AACD;AACA;AACA;EACCxB,SAAS,EAAEP,SAAS,CAACgC,WAAW,CAACF,UAAU;EAE3C;AACD;AACA;AACA;AACA;AACA;EACCnB,uCAAuC,EAAEX,SAAS,CAAC+B,IAAI;EAEvD;AACD;AACA;EACC7B,QAAQ,EAAEC;AACX,CAAC;AAED,eAAeC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}