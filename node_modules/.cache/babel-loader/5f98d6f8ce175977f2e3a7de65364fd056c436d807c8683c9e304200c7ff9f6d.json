{"ast":null,"code":"import { useCallback } from 'react';\n\n// Returns a custom `onKeyDown` handler that works around a Backspace keypress edge case:\n// * `<PhoneInputWithCountrySelect international countryCallingCodeEditable={false}/>`\n// * When placing the caret before the leading plus character and pressing Backspace,\n//   it duplicates the country calling code in the `<input/>`.\n// https://github.com/catamphetamine/react-phone-number-input/issues/442\nexport default function useInputKeyDownHandler(_ref) {\n  var onKeyDown = _ref.onKeyDown,\n    international = _ref.international;\n  return useCallback(function (event) {\n    if (event.keyCode === BACKSPACE_KEY_CODE && international) {\n      // It checks `event.target` here for being an `<input/>` element\n      // because \"keydown\" events may bubble from arbitrary child elements\n      // so there's no guarantee that `event.target` represents an `<input/>` element.\n      // Also, since `inputComponent` is not neceesarily an `<input/>`, this check is required too.\n      if (event.target instanceof HTMLInputElement) {\n        if (getCaretPosition(event.target) === AFTER_LEADING_PLUS_CARET_POSITION) {\n          event.preventDefault();\n          return;\n        }\n      }\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  }, [onKeyDown, international]);\n}\nvar BACKSPACE_KEY_CODE = 8;\n\n// Gets the caret position in an `<input/>` field.\n// The caret position starts with `0` which means \"before the first character\".\nfunction getCaretPosition(element) {\n  return element.selectionStart;\n}\nvar AFTER_LEADING_PLUS_CARET_POSITION = '+'.length;","map":{"version":3,"names":["useCallback","useInputKeyDownHandler","_ref","onKeyDown","international","event","keyCode","BACKSPACE_KEY_CODE","target","HTMLInputElement","getCaretPosition","AFTER_LEADING_PLUS_CARET_POSITION","preventDefault","element","selectionStart","length"],"sources":["C:/Users/DIVYA/Desktop/React Apps/MyWorkMovielist/my-new-app/node_modules/react-phone-number-input/modules/useInputKeyDownHandler.js"],"sourcesContent":["import { useCallback } from 'react';\n\n// Returns a custom `onKeyDown` handler that works around a Backspace keypress edge case:\n// * `<PhoneInputWithCountrySelect international countryCallingCodeEditable={false}/>`\n// * When placing the caret before the leading plus character and pressing Backspace,\n//   it duplicates the country calling code in the `<input/>`.\n// https://github.com/catamphetamine/react-phone-number-input/issues/442\nexport default function useInputKeyDownHandler(_ref) {\n  var onKeyDown = _ref.onKeyDown,\n    international = _ref.international;\n  return useCallback(function (event) {\n    if (event.keyCode === BACKSPACE_KEY_CODE && international) {\n      // It checks `event.target` here for being an `<input/>` element\n      // because \"keydown\" events may bubble from arbitrary child elements\n      // so there's no guarantee that `event.target` represents an `<input/>` element.\n      // Also, since `inputComponent` is not neceesarily an `<input/>`, this check is required too.\n      if (event.target instanceof HTMLInputElement) {\n        if (getCaretPosition(event.target) === AFTER_LEADING_PLUS_CARET_POSITION) {\n          event.preventDefault();\n          return;\n        }\n      }\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  }, [onKeyDown, international]);\n}\nvar BACKSPACE_KEY_CODE = 8;\n\n// Gets the caret position in an `<input/>` field.\n// The caret position starts with `0` which means \"before the first character\".\nfunction getCaretPosition(element) {\n  return element.selectionStart;\n}\nvar AFTER_LEADING_PLUS_CARET_POSITION = '+'.length;\n//# sourceMappingURL=useInputKeyDownHandler.js.map"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;;AAEnC;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,sBAAsBA,CAACC,IAAI,EAAE;EACnD,IAAIC,SAAS,GAAGD,IAAI,CAACC,SAAS;IAC5BC,aAAa,GAAGF,IAAI,CAACE,aAAa;EACpC,OAAOJ,WAAW,CAAC,UAAUK,KAAK,EAAE;IAClC,IAAIA,KAAK,CAACC,OAAO,KAAKC,kBAAkB,IAAIH,aAAa,EAAE;MACzD;MACA;MACA;MACA;MACA,IAAIC,KAAK,CAACG,MAAM,YAAYC,gBAAgB,EAAE;QAC5C,IAAIC,gBAAgB,CAACL,KAAK,CAACG,MAAM,CAAC,KAAKG,iCAAiC,EAAE;UACxEN,KAAK,CAACO,cAAc,CAAC,CAAC;UACtB;QACF;MACF;IACF;IACA,IAAIT,SAAS,EAAE;MACbA,SAAS,CAACE,KAAK,CAAC;IAClB;EACF,CAAC,EAAE,CAACF,SAAS,EAAEC,aAAa,CAAC,CAAC;AAChC;AACA,IAAIG,kBAAkB,GAAG,CAAC;;AAE1B;AACA;AACA,SAASG,gBAAgBA,CAACG,OAAO,EAAE;EACjC,OAAOA,OAAO,CAACC,cAAc;AAC/B;AACA,IAAIH,iCAAiC,GAAG,GAAG,CAACI,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}