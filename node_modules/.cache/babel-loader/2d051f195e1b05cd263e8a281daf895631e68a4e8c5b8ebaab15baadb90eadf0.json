{"ast":null,"code":"import { parsePhoneNumberCharacter } from 'libphonenumber-js/core';\n\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object?} context - An optional object that could be used by this function to set arbitrary \"flags\". The object should be shared within the parsing of the whole string.\r\n * @return {string?} The parsed character.\r\n */\nexport default function parsePhoneNumberCharacter_(character, prevParsedCharacters, context) {\n  // `context` argument was added as a third argument of `parse()` function\n  // in `input-format` package on Dec 26th, 2023. So it could potentially be\n  // `undefined` here if a 3rd-party app somehow ends up with this newer version\n  // of `react-phone-number-input` and an older version of `input-format`.\n  // Dunno how, but just in case, it could be `undefined` here and it wouldn't break.\n  // Maybe it's not required to handle `undefined` case here.\n  //\n  // The addition of the `context` argument was to fix the slightly-weird behavior\n  // of parsing an input string when the user inputs something like `\"2+7\"\n  // https://github.com/catamphetamine/react-phone-number-input/issues/437\n  //\n  // If the parser encounters an unexpected `+` in a string being parsed\n  // then it simply discards that out-of-place `+` and any following characters.\n  //\n  if (context && context.ignoreRest) {\n    return;\n  }\n  var emitEvent = function emitEvent(eventName) {\n    if (context) {\n      switch (eventName) {\n        case 'end':\n          context.ignoreRest = true;\n          break;\n      }\n    }\n  };\n  return parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent);\n}","map":{"version":3,"names":["parsePhoneNumberCharacter","parsePhoneNumberCharacter_","character","prevParsedCharacters","context","ignoreRest","emitEvent","eventName"],"sources":["C:/Users/DIVYA/Desktop/React Apps/MyWorkMovielist/my-new-app/node_modules/react-phone-number-input/modules/helpers/parsePhoneNumberCharacter.js"],"sourcesContent":["import { parsePhoneNumberCharacter } from 'libphonenumber-js/core';\n\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object?} context - An optional object that could be used by this function to set arbitrary \"flags\". The object should be shared within the parsing of the whole string.\r\n * @return {string?} The parsed character.\r\n */\nexport default function parsePhoneNumberCharacter_(character, prevParsedCharacters, context) {\n  // `context` argument was added as a third argument of `parse()` function\n  // in `input-format` package on Dec 26th, 2023. So it could potentially be\n  // `undefined` here if a 3rd-party app somehow ends up with this newer version\n  // of `react-phone-number-input` and an older version of `input-format`.\n  // Dunno how, but just in case, it could be `undefined` here and it wouldn't break.\n  // Maybe it's not required to handle `undefined` case here.\n  //\n  // The addition of the `context` argument was to fix the slightly-weird behavior\n  // of parsing an input string when the user inputs something like `\"2+7\"\n  // https://github.com/catamphetamine/react-phone-number-input/issues/437\n  //\n  // If the parser encounters an unexpected `+` in a string being parsed\n  // then it simply discards that out-of-place `+` and any following characters.\n  //\n  if (context && context.ignoreRest) {\n    return;\n  }\n  var emitEvent = function emitEvent(eventName) {\n    if (context) {\n      switch (eventName) {\n        case 'end':\n          context.ignoreRest = true;\n          break;\n      }\n    }\n  };\n  return parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent);\n}\n//# sourceMappingURL=parsePhoneNumberCharacter.js.map"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,wBAAwB;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,0BAA0BA,CAACC,SAAS,EAAEC,oBAAoB,EAAEC,OAAO,EAAE;EAC3F;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIA,OAAO,IAAIA,OAAO,CAACC,UAAU,EAAE;IACjC;EACF;EACA,IAAIC,SAAS,GAAG,SAASA,SAASA,CAACC,SAAS,EAAE;IAC5C,IAAIH,OAAO,EAAE;MACX,QAAQG,SAAS;QACf,KAAK,KAAK;UACRH,OAAO,CAACC,UAAU,GAAG,IAAI;UACzB;MACJ;IACF;EACF,CAAC;EACD,OAAOL,yBAAyB,CAACE,SAAS,EAAEC,oBAAoB,EAAEG,SAAS,CAAC;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}